# Make.rules.gcc
#
# Generic rules (in common between all makefiles) for building with gcc
#
# (C) 1999-2001 empeg ltd.
#
# This software is licensed under the GNU General Public Licence (see file
# COPYING), unless you possess an alternative written licence from empeg ltd.
#
# (:Rio Source Release  17-Oct-2005 17:42 toby:)

# Debugging symbols
#   Use GDB=1 to include gdb debugging symbols.
ifeq ($(DEBUG),0)
GDB=0
endif

ifeq ($(DEBUG),1)
GDB=0
endif

ifeq ($(GDB),)
GDB=1
endif

# Note ROM=1 implies that an image _runs_ from ROM, not that it can be
# placed in ROM.

# The UPGRADE_VERSION bits mean:
#    0x1 - set implies build is designed to run from RAM
#    0x2 - set implies build may be put in ROM.
#
# Therefore the values have the following meaning:
#
#    0x0 - Not valid
#
#    0x1 - Image to be put in ROM and will be run from ROM. Not used
#          any more.
#
#    0x2 - Image to be put on the disk and will be run from RAM using
#          the ramloader (only useful during development - not actually
#          used or recommended for use any more - you might as well
#          just say 0x3)
#
#    0x3 - Image to be put in ROM or RAM and will be copied to RAM if
#          necessary before being run. An image so marked can be put
#          in ROM or left on disk for the ramloader to run.

ifeq ($(ROM),1)
# ROM versions can only be run from ROM
MAYBE_ROM:=-rom
UPGRADE_VERSION:=0x2
$(error ROM builds are no longer recommended. Remove this check at your peril)
else
MAYBE_ROM:=

# RAM versions can be run from ROM or RAM but the bootloader must know
# to copy it to RAM first.
UPGRADE_VERSION:=0x3

ifeq ($(BUILD),sapphire)
# Sapphire has RAM versions that are loaded from disk
UPGRADE_VERSION:=1
endif

ifeq ($(BUILD),condor)
# Condor has RAM versions that are loaded from disk
UPGRADE_VERSION:=1
endif

endif

# Remove all default suffix rules
.SUFFIXES:

OBJ_SUFFIX:=.o
LIB_PREFIX:=lib
LIB_SUFFIX:=.a
EXE_SUFFIX:=
DLL_SUFFIX:=.so
RES_SUFFIX:=.res

# Are we doing a 'make clean' of any sort? if so, no dependencies please.
# This only works on recent makes, but is benign on older ones (which don't
# set MAKECMDGOALS).
ifneq ($(findstring clean,$(MAKECMDGOALS)),)
CLEANING:=1
endif

ifeq ($(OS),Windows_NT)
IS_CYGWIN:=1
else
IS_CYGWIN:=0

 # Bash version 1 is broken, it will randomly fail with failing to open
 # pipes if the machine is under load. This happens during the nightly
 # build quite a lot. To work around this we try to use bash2. On
 # older redhat systems bash is known as bash2 since the startup files
 # don't like it. So, first we determine if make's default shell is
 # bash version 1, if it is then we hunt for bash 2. If bash 2 is
 # unavailable we error out.
 #
 # If make's $SHELL (normally /bin/sh) is not actually bash (Solaris,
 # hacked Linux box) then $BASH_VERSION will be the null string and
 # we'll assume that the shell that make is using is sane. This may
 # not be a valid assumption but we can do little else.

 BASH_MAJOR_VERSION:=$(shell echo $$BASH_VERSION| sed 's/^\(.\).*$$/\1/')
 ifeq ($(BASH_MAJOR_VERSION), 1)
  # Make's shell is bash 1. Bad.
  ifeq ($(wildcard /bin/bash2),)
   # Bash 2 isn't where we expect it to be. :-(
   ifeq ($(OVERRIDE_BROKEN_BASH), )
    $(error bash version 1 has a known race condition that causes it \
            to randomly fail if the machine is under load.\
            I have detected that make is using bash 1 and bash 2 \
            is not available. You can provide the path to a fixed \
            shell by specifying SHELL=/path/to/sh. You can disable \
            this error by setting OVERRIDE_BROKEN_BASH=1.)
   endif
  else
   SHELL:=/bin/bash2 --norc
  endif
 endif

 # This is a hack to cause it to be output every time we run the top
 # level Makefile
 ifeq ($(TOP), .)
  WIBBLE42:=$(shell echo Make shell is \"$(SHELL)\" 1>&2)
 endif
endif

SHARED_INCLUDE=-I$(TOP)/lib -I$(TOP)/lib/core -I$(TOP)/lib/protocol -I$(TOP)/lib/util -I$(TOP)/lib/ui -I$(TOP)/lib/thread -I$(TOP)/lib/hardware  -I$(TOP)/lib/rplatform -I$(TOP)/lib/rplatform/Include
ifeq ($(VOICE), 1)
SHARED_INCLUDE+=-I$(TOP)/lib/voice
endif
SHARED_INCLUDE+=-I$(TOP)/lib/codec
SHARED_INCLUDE+=-I$(TOP)/lib/dsp

MSGCC:=$(TOP)/tools/msgcc2.py
OPTCC:=$(TOP)/tools/optbuild.py
FONTCC:=$(TOP)/tools/build_font.py

# Deduce the target name

ifeq ($(ARCH),pc)
TARGET_HEAD:=$(shell uname -m | sed 's/i[34567]86/pc/'|sed 's/Power Macintosh/ppcmac/')
else
TARGET_HEAD:=$(ARCH)
endif
TARGET_TAIL:=debug$(DEBUG)
ifeq ($(STATIC), 1)
TARGET_TAIL:=$(TARGET_TAIL)-static
endif
ifeq ($(PROFILE), 1)
TARGET_TAIL:=$(TARGET_TAIL)-profile
endif
ifeq ($(PROFILE), 2)
TARGET_TAIL:=$(TARGET_TAIL)-profile2
endif
ifeq ($(ROM), 1)
TARGET_TAIL:=$(TARGET_TAIL)-rom
endif
ifeq ($(COP_SAFETY_CHECK), 1)
TARGET_TAIL:=$(TARGET_TAIL)-cop_safety_check
endif

# All platforms except eCos can use "generic" library directories to
# avoid compiling what would be identical code for each one.

TARGET_SPECIFIC:=$(TARGET_HEAD)-$(BUILD)-$(TARGET_TAIL)
TARGET_GENERIC:=$(TARGET_HEAD)-generic-$(TARGET_TAIL)
ifeq ($(ARCH), armecos)
TARGET_GENERIC:=$(TARGET_SPECIFIC)
endif
TARGET_PREFIX:=$(TARGET_SPECIFIC)/
TARGET_GENERIC_LIBDIR:=$(TOP)/lib/$(TARGET_GENERIC)/
TARGET_SPECIFIC_LIBDIR:=$(TOP)/lib/$(TARGET_SPECIFIC)/

HOST_HEAD:=pc
HOST_TAIL:=debug$(DEBUG)
ifeq ($(STATIC), 1)
HOST_TAIL:=$(HOST_TAIL)-static
endif
ifeq ($(PROFILE), 1)
HOST_TAIL:=$(HOST_TAIL)-profile
endif
ifeq ($(PROFILE), 2)
HOST_TAIL:=$(HOST_TAIL)-profile2
endif
HOST_GENERIC:=$(HOST_HEAD)-generic-$(HOST_TAIL)
HOST_SPECIFIC:=$(HOST_HEAD)-$(BUILD)-$(HOST_TAIL)
HOST_PREFIX:=$(HOST_SPECIFIC)/
HOST_GENERIC_LIBDIR:=$(TOP)/lib/$(HOST_GENERIC)/
HOST_SPECIFIC_LIBDIR:=$(TOP)/lib/$(HOST_SPECIFIC)/

TARGET_LIBPATH:=-L$(TOP)/lib/$(TARGET_GENERIC) -L$(TOP)/lib/$(TARGET_SPECIFIC)

ifeq ($(ARCH), arm)
ARM_TOOLS_PREFIX=arm-empeg-linux-
TARGET_ARCH=ARCH_EMPEG
TARGET_CC=$(ARM_TOOLS_PREFIX)gcc
TARGET_CXX=$(ARM_TOOLS_PREFIX)g++
TARGET_AS=$(ARM_TOOLS_PREFIX)as
TARGET_LD=$(ARM_TOOLS_PREFIX)g++
TARGET_REALLD=$(ARM_TOOLS_PREFIX)ld
TARGET_AR=$(ARM_TOOLS_PREFIX)ar
TARGET_STRIP=$(ARM_TOOLS_PREFIX)strip
TARGET_RANLIB=$(ARM_TOOLS_PREFIX)ranlib
TARGET_OBJCOPY=$(ARM_TOOLS_PREFIX)objcopy
TARGET_INCLUDEPATH=$(SHARED_INCLUDE)
TARGET_ARCH_DEFINES=
TARGET_LIBPATH+=-L/home/empeg/lib
ifeq ($(VOICE), 1)
TARGET_ARCH_DEFINES+=-DCONFIG_VOICE -D__USE_MALLOC
endif
TARGET_CPUFLAGS=-mapcs-32 -march=armv4 $(BUILD_CPU_FLAGS)
TARGET_LDFLAGS=-Wl,-p
endif

ifeq ($(ARCH), xscale)
ARM_TOOLS_PREFIX=xscale-empeg-linux-
TARGET_ARCH=ARCH_EMPEG
TARGET_CC=$(ARM_TOOLS_PREFIX)gcc
TARGET_CXX=$(ARM_TOOLS_PREFIX)g++
TARGET_AS=$(ARM_TOOLS_PREFIX)as
TARGET_LD=$(ARM_TOOLS_PREFIX)g++
TARGET_REALLD=$(ARM_TOOLS_PREFIX)ld
TARGET_AR=$(ARM_TOOLS_PREFIX)ar
TARGET_STRIP=$(ARM_TOOLS_PREFIX)strip
TARGET_RANLIB=$(ARM_TOOLS_PREFIX)ranlib
TARGET_OBJCOPY=$(ARM_TOOLS_PREFIX)objcopy
TARGET_INCLUDEPATH=$(SHARED_INCLUDE)
TARGET_ARCH_DEFINES=
TARGET_LIBPATH+=-L/home/empeg/lib
ifeq ($(VOICE), 1)
TARGET_ARCH_DEFINES+=-DCONFIG_VOICE -D__USE_MALLOC
endif
TARGET_CPUFLAGS=-mtune=xscale -mcpu=xscale -march=armv5 $(BUILD_CPU_FLAGS)
TARGET_LDFLAGS=-Wl,-p
endif

ifeq ($(ARCH), armecos)
ARM_TOOLS_PREFIX=arm-elf-
TARGET_ARCH=ARCH_EMPEG
TARGET_CC=$(ARM_TOOLS_PREFIX)gcc
TARGET_CXX=$(ARM_TOOLS_PREFIX)g++
TARGET_AS=$(ARM_TOOLS_PREFIX)as
TARGET_LD=$(ARM_TOOLS_PREFIX)g++
TARGET_REALLD=$(ARM_TOOLS_PREFIX)ld
TARGET_AR=$(ARM_TOOLS_PREFIX)ar
TARGET_STRIP=$(ARM_TOOLS_PREFIX)strip
TARGET_RANLIB=$(ARM_TOOLS_PREFIX)ranlib
TARGET_OBJCOPY=$(ARM_TOOLS_PREFIX)objcopy
# Use TARGET_AR not TARGET_CXX as the latter may well be ccache
ECOS_BASE:=$(patsubst %/bin/,%,$(dir $(shell which $(TARGET_AR))))
TARGET_INCLUDEPATH=$(SHARED_INCLUDE) -I$(TOP)/lib/ecos/ecos-$(BUILD)$(MAYBE_ROM)/include -I$(ECOS_BASE)/arm-elf/include/g++-3
TARGET_ARCH_DEFINES=-DECOS -D__ECOS -DECOS1
TARGET_LIBPATH+=-L$(TOP)/lib/ecos/ecos-$(BUILD)$(MAYBE_ROM)/lib -nostdlib -Ttarget.ld -Wl,--gc-sections
TARGET_CPUFLAGS=-mapcs-32 -march=armv4 -ffunction-sections -fdata-sections -finit-priority $(BUILD_CPU_FLAGS)
TARGET_LIBFILES+=$(wildcard $(TOP)/lib/ecos/ecos-$(BUILD)$(MAYBE_ROM)/lib/*)
TARGET_LDFLAGS=-Wl,-p
GCC3=
endif

ifeq ($(ARCH), armecos2)
ARM_TOOLS_PREFIX=xscale-elf-
TARGET_ARCH=ARCH_EMPEG
TARGET_CC=$(ARM_TOOLS_PREFIX)gcc
TARGET_CXX=$(ARM_TOOLS_PREFIX)g++
TARGET_AS=$(ARM_TOOLS_PREFIX)as
TARGET_LD=$(ARM_TOOLS_PREFIX)g++
TARGET_REALLD=$(ARM_TOOLS_PREFIX)ld
TARGET_AR=$(ARM_TOOLS_PREFIX)ar
TARGET_STRIP=$(ARM_TOOLS_PREFIX)strip
TARGET_RANLIB=$(ARM_TOOLS_PREFIX)ranlib
TARGET_OBJCOPY=$(ARM_TOOLS_PREFIX)objcopy
# Use TARGET_AR not TARGET_CXX as the latter may well be ccache
ECOS_BASE:=$(patsubst %/bin/,%,$(dir $(shell which $(TARGET_AR))))
TARGET_INCLUDEPATH=$(SHARED_INCLUDE) -I$(TOP)/lib/ecos2/ecos-$(BUILD)$(MAYBE_ROM)/include
TARGET_ARCH_DEFINES=-DECOS -D__ECOS -DECOS2 -DEMPEG_ARM_5E
TARGET_LIBPATH+=-L$(TOP)/lib/ecos2/ecos-$(BUILD)$(MAYBE_ROM)/lib -nostdlib -Ttarget.ld -Wl,--gc-sections
TARGET_CPUFLAGS=-mapcs-32 -mcpu=xscale $(BUILD_CPU_FLAGS)
# One more shot at empeg_util as it defines stuff (like strdup) which libstdc++
# needs
TARGET_POSTLIBS:=-lstdc++ -lempeg_util
TARGET_LDFLAGS=-Wl,-p -Wl,-no-undefined
GCC3=1
endif

ifeq ($(ARCH), sparc)
ARM_TOOLS_PREFIX=sparc-empeg-linux-
TARGET_ARCH=ARCH_SPARC
TARGET_CC=$(ARM_TOOLS_PREFIX)gcc
TARGET_CXX=$(ARM_TOOLS_PREFIX)g++
TARGET_AS=$(ARM_TOOLS_PREFIX)as
TARGET_LD=$(ARM_TOOLS_PREFIX)g++
TARGET_REALLD=$(ARM_TOOLS_PREFIX)ld
TARGET_AR=$(ARM_TOOLS_PREFIX)ar
TARGET_STRIP=$(ARM_TOOLS_PREFIX)strip
TARGET_RANLIB=$(ARM_TOOLS_PREFIX)ranlib
TARGET_OBJCOPY=$(ARM_TOOLS_PREFIX)objcopy
TARGET_INCLUDEPATH=$(SHARED_INCLUDE)
TARGET_ARCH_DEFINES=
TARGET_LIBPATH+=-L/home/empeg/lib
HOST_ARCH_DEFINES+= -DTARGET_BIGENDIAN
endif

ifeq ($(ARCH), mips)
ARM_TOOLS_PREFIX=mips-empeg-linux-
TARGET_ARCH=ARCH_MIPS
TARGET_CC=$(ARM_TOOLS_PREFIX)gcc
TARGET_CXX=$(ARM_TOOLS_PREFIX)g++
TARGET_AS=$(ARM_TOOLS_PREFIX)as
TARGET_LD=$(ARM_TOOLS_PREFIX)g++
TARGET_REALLD=$(ARM_TOOLS_PREFIX)ld
TARGET_AR=$(ARM_TOOLS_PREFIX)ar
TARGET_STRIP=$(ARM_TOOLS_PREFIX)strip
TARGET_RANLIB=$(ARM_TOOLS_PREFIX)ranlib
TARGET_OBJCOPY=$(ARM_TOOLS_PREFIX)objcopy
TARGET_INCLUDEPATH=$(SHARED_INCLUDE)
TARGET_ARCH_DEFINES=
TARGET_LIBPATH+=-L/home/empeg/lib
HOST_ARCH_DEFINES+= -DTARGET_BIGENDIAN
endif


ifeq ($(ARCH), pc)
TARGET_ARCH=ARCH_PC
TARGET_CC=$(PC_TOOLS_PREFIX)gcc
TARGET_CXX=$(PC_TOOLS_PREFIX)g++
TARGET_AR=ar
TARGET_AS=$(PC_TOOLS_PREFIX)as
TARGET_LD=$(PC_TOOLS_PREFIX)g++
TARGET_REALLD=$(PC_TOOLS_PREFIX)ld
TARGET_STRIP=$(PC_TOOLS_PREFIX)strip
TARGET_RANLIB=ranlib
TARGET_OBJCOPY=$(PC_TOOLS_PREFIX)objcopy
TARGET_INCLUDEPATH=$(SHARED_INCLUDE) -I/usr/X11R6/include
GCC_VERSION:=$(shell $(TARGET_CC) --version | sed -e 's/[^0-9]*\([0-9]\).*/\1/' | head -n1)
ifeq ($(GCC_VERSION),3)
GCC3=1
endif
ifeq ($(GCC3),)
TARGET_ARCH_DEFINES= -D__USE_MALLOC
endif
TARGET_CPUFLAGS=
endif

HOST_ARCH=ARCH_PC
HOST_LIBPATH:=-L$(TOP)/lib/$(HOST_GENERIC) -L$(TOP)/lib/$(HOST_SPECIFIC)
HOST_CC=gcc
HOST_CXX=g++
HOST_AS=as
HOST_LD=g++
HOST_REALLD=ld
HOST_STRIP=strip
HOST_INCLUDEPATH=$(SHARED_INCLUDE)
#HOST_LIBPATH=-L$(SHARED)/target-pc
HOST_ARCH_DEFINES+= -D__USE_MALLOC


ifeq ($(DEBUG), 6)
TARGET_DBG1:=-DDEBUG=6 -DDEBUG_MEMORY -fprofile-arcs -ftest-coverage
HOST_DBG1:=-DDEBUG=6 -DDEBUG_MEMORY -fprofile-arcs -ftest-coverage
endif
ifeq ($(DEBUG), 5)
TARGET_DBG1:=-DDEBUG=5 -DDEBUG_MEMORY
HOST_DBG1:=-DDEBUG=5 -DDEBUG_MEMORY
endif
ifeq ($(DEBUG), 4)
TARGET_DBG1:=-DDEBUG=4 -DDEBUG_MEMORY
HOST_DBG1:=-DDEBUG=4 -DDEBUG_MEMORY
endif
ifeq ($(DEBUG), 3)
TARGET_DBG1:=-DDEBUG=3 -DDEBUG_MEMORY
HOST_DBG1:=-DDEBUG=3 -DDEBUG_MEMORY
TARGET_LIBS+= -lefence
endif
ifeq ($(DEBUG), 2)
TARGET_DBG1:=-DDEBUG=2 -O
# TARGET_LIBS+= -lefence
HOST_DBG1:=-DDEBUG=2 -O
endif
ifeq ($(DEBUG), 1)
TARGET_DBG1:=-DDEBUG=1 -O
HOST_DBG1:=-DDEBUG=1 -O
endif
ifeq ($(DEBUG), 0)
TARGET_DBG1:=-DDEBUG=0 -O2
HOST_DBG1:=-DDEBUG=0 -O2 -fno-implement-inlines
endif
ifneq ($(GDB), 0)
TARGET_DBG2+=-ggdb -g
HOST_DBG2+=-ggdb -g
endif
ifneq ($(DEBUG), 0)
TARGET_DBG1+=-fno-default-inline
endif
ifeq ($(ARCH), arm)
TARGET_DBG1+=-finline-limit-16
endif
ifeq ($(ARCH:armecos2=armecos), armecos)
TARGET_DBG1+=-finline-limit-16 -UDEBUG_MEMORY
endif

# We use -D_PTHREADS to ensure that the STL allocator is thread safe
# on all platforms. It just so happens that for Linux targets
# _STL_PTHREADS gets defined automaticallyy anyway but it does no harm
# to do this anyway.
HOST_DEFINES=$(HOST_ARCH_DEFINES) -D_REENTRANT -D_PTHREADS $(HOST_DBG1) -DBUILD="$(BUILD)"

TARGET_DEFINES:= $(TARGET_ARCH_DEFINES) -D_REENTRANT -D_PTHREADS $(TARGET_DBG1) \
		 -D$(TARGET_ARCH) -DBUILD="$(BUILD)"
TARGET_COMPILEFLAGS=-c -pipe -Wall -Wundef -W -Wpointer-arith -Wconversion \
		-Wstrict-prototypes -Wwrite-strings -fno-rtti \
		$(TARGET_CPUFLAGS) $(TARGET_INCLUDEPATH) $(TARGET_DEFINES) \
		$(TARGET_DBG2) -D_GNU_SOURCE
#TARGET_CFLAGS=-c -pipe -Wall -W -fno-rtti $(TARGET_CPUFLAGS) $(TARGET_INCLUDEPATH) $(TARGET_DEFINES) $(TARGET_DBG2)
#TARGET_CXXFLAGS=-c -pipe -Wall -fno-rtti -fno-exceptions $(TARGET_CPUFLAGS) $(TARGET_INCLUDEPATH) $(TARGET_DEFINES) $(TARGET_DBG2)
TARGET_CFLAGS=$(TARGET_COMPILEFLAGS) -Wno-conversion
ifeq ($(ARCH), arm)
TARGET_CXXFLAGS=-fno-exceptions $(TARGET_COMPILEFLAGS)
else
ifeq ($(ARCH:armecos2=armecos), armecos)
TARGET_CXXFLAGS=-fno-exceptions $(TARGET_COMPILEFLAGS)
else
TARGET_CXXFLAGS=$(TARGET_COMPILEFLAGS)
endif
endif
TARGET_ASFLAGS=$(TARGET_COMPILEFLAGS)

TARGET_LDFLAGS+=$(TARGET_DBG2) $(TARGET_CPUFLAGS) $(TARGET_LIBPATH)

# -Wl,-Map,Map-$(TARGET_SPECIFIC).txt

#--static #-ggdb

# STLport only in debug>0
ifeq ($(findstring $(DEBUG),0),)
ifneq ($(BUILD),gaea)
ifneq ($(ARCH),armecos)
ifeq ($(GCC3),)
ifneq ($(wildcard $(TOP)/lib/STLport/stlport),)
TARGET_CXXFLAGS+= -isystem $(TOP)/lib/STLport/stlport -ftemplate-depth-64 -D_STLP_USE_NEWALLOC
endif
endif
endif
endif
endif

# Extra GCC3 warnings
ifeq ($(GCC3),1)
TARGET_CXXFLAGS+=-Wuninitialized -Wmissing-prototypes -Wsign-promo -Wno-system-headers
endif

# JSG This changed to allow intermediate directories between TARGET_PREFIX and the object file to match 
# intermediate directories between current dir and the source file. 
TARGET_MKDIR=mkdir -p `dirname $@` $(TARGET_PREFIX)

#TARGET_MKLIBDIR=(test -d $(TARGET_LIBDIR) || mkdir $(TARGET_LIBDIR) )
TARGET_GENERIC_MKDIR=mkdir -p $(TARGET_GENERIC_LIBDIR)
TARGET_SPECIFIC_MKDIR=mkdir -p $(TARGET_SPECIFIC_LIBDIR)

TARGET_MKDEP2:=$(TOP)/tools/mkdep2 $(TARGET_PREFIX) $(TARGET_CXX)
XPM_SANITISE=$(TOP)/tools/xpm-sanitise
MAKE_VERSION_GEN_H=@$(TOP)/tools/make-version-gen-h
ERRBUILD=$(TOP)/tools/errbuild2.py

ifeq ($(STATIC), 1)
TARGET_CFLAGS+= -DSTATIC_LINK
TARGET_CXXFLAGS+= -DSTATIC_LINK
TARGET_ASFLAGS+= -DSTATIC_LINK
TARGET_LDFLAGS+=--static
endif

ifeq ($(ROM),1)
TARGET_CFLAGS  += -DROM
TARGET_CXXFLAGS+= -DROM
TARGET_ASFLAGS += -DROM
endif

ifeq ($(COP_SAFETY_CHECK),1)
TARGET_CFLAGS  += -DCOP_SAFETY_CHECK
TARGET_CXXFLAGS+= -DCOP_SAFETY_CHECK
TARGET_ASFLAGS += -DCOP_SAFETY_CHECK
endif

ifeq ($(BUILD), mercury)
TARGET_CFLAGS+= -DMERCURY
TARGET_CXXFLAGS+= -DMERCURY
TARGET_ASFLAGS+= -DMERCURY
endif

ifeq ($(BUILD), kennedy)
TARGET_CFLAGS+= -DKENNEDY
TARGET_CXXFLAGS+= -DKENNEDY
TARGET_ASFLAGS+= -DKENNEDY
endif

ifeq ($(BUILD), tardis)
TARGET_CFLAGS+= -DTARDIS
TARGET_CXXFLAGS+= -DTARDIS
TARGET_ASFLAGS+= -DTARDIS
endif

ifeq ($(BUILD), whitechapel)
TARGET_CFLAGS+= -DWHITECHAPEL
TARGET_CXXFLAGS+= -DWHITECHAPEL
TARGET_ASFLAGS+= -DWHITECHAPEL
endif

ifeq ($(BUILD), kyanite)
TARGET_CFLAGS+= -DKYANITE
TARGET_CXXFLAGS+= -DKYANITE
TARGET_ASFLAGS+= -DKYANITE
endif

ifeq ($(BUILD), jupiter)
TARGET_CFLAGS+= -DJUPITER
TARGET_CXXFLAGS+= -DJUPITER
TARGET_ASFLAGS+= -DJUPITER
endif

ifeq ($(BUILD), venus)
TARGET_CFLAGS+= -DVENUS
TARGET_CXXFLAGS+= -DVENUS
TARGET_ASFLAGS+= -DVENUS
endif

ifeq ($(BUILD), granite)
TARGET_CFLAGS+= -DGRANITE
TARGET_CXXFLAGS+= -DGRANITE
TARGET_ASFLAGS+= -DGRANITE
endif

ifeq ($(BUILD), onyx)
TARGET_CFLAGS+= -DONYX
TARGET_CXXFLAGS+= -DONYX
TARGET_ASFLAGS+= -DONYX
endif

ifeq ($(BUILD),jellystone)
TARGET_CFLAGS+= -DJELLYSTONE
TARGET_CXXFLAGS+= -DJELLYSTONE
TARGET_ASFLAGS+= -DJELLYSTONE
endif

ifeq ($(BUILD),car1)
TARGET_CFLAGS+= -DCAR1 -DCAR
TARGET_CXXFLAGS+= -DCAR1 -DCAR
TARGET_ASFLAGS+= -DCAR1 -DCAR
endif

ifeq ($(BUILD),car2)
TARGET_CFLAGS+= -DCAR2 -DCAR
TARGET_CXXFLAGS+= -DCAR2 -DCAR
TARGET_ASFLAGS+= -DCAR2 -DCAR
endif

ifeq ($(BUILD), obsidian)
TARGET_CFLAGS+= -DOBSIDIAN -DCAR2 -DCAR
TARGET_CXXFLAGS+= -DOBSIDIAN -DCAR2 -DCAR
TARGET_ASFLAGS+= -DOBSIDIAN -DCAR2 -DCAR
endif

ifeq ($(BUILD), camelot)
TARGET_CFLAGS+= -DCAMELOT
TARGET_CXXFLAGS+= -DCAMELOT
TARGET_ASFLAGS+= -DCAMELOT
endif

ifeq ($(BUILD), sapphire)
TARGET_CFLAGS+= -DSAPPHIRE
TARGET_CXXFLAGS+= -DSAPPHIRE
TARGET_ASFLAGS+= -DSAPPHIRE
endif

ifeq ($(BUILD), gaea)
TARGET_CFLAGS+= -DGAEA
TARGET_CXXFLAGS+= -DGAEA
TARGET_ASFLAGS+= -DGAEA
endif

ifeq ($(BUILD), condor)
TARGET_CFLAGS+= -DCONDOR
TARGET_CXXFLAGS+= -DCONDOR
TARGET_ASFLAGS+= -DCONDOR
endif

TARGET_DEP=$(TOP)/tools/mkdep $(TARGET_PREFIX) $(TARGET_CXX) $(TARGET_INCLUDEPATH)

RM=rm -f
TAGS=etags

HOST_CFLAGS=-c -pipe -Wall $(HOST_INCLUDEPATH) $(HOST_DEFINES) -D$(HOST_ARCH)
HOST_CXXFLAGS=-c -pipe -Wall -fno-rtti $(HOST_INCLUDEPATH) $(HOST_DEFINES) -D$(HOST_ARCH)
HOST_LDFLAGS=$(HOST_LIBPATH)
HOST_LIBS=-lpthread -lempeg_util -lempeg_protocol -lempeg_core 
HOST_LIBFILES=$(HOST_SPECIFIC_LIBDIR)libempeg_util.a \
	$(HOST_GENERIC_LIBDIR)libempeg_protocol.a \
	$(HOST_GENERIC_LIBDIR)libempeg_core.a

HOST_DEP=$(TOP)/tools/mkdep $(HOST_PREFIX) $(HOST_CXX) $(HOST_INCLUDEPATH)
HOST_MKDIR=mkdir -p $(HOST_PREFIX)
HOST_MKDEP2:=$(TOP)/tools/mkdep2 $(HOST_PREFIX) $(HOST_CXX)

ifeq ($(VOICE), 1)
TARGET_LIBS+=-lempeg_voice
TARGET_LIBFILES+=$(TARGET_GENERIC_LIBDIR)libempeg_voice.a
endif

ifeq ($(ARCH), arm)

ifeq ($(BUILD), car1)
TARGET_LIBS+=-lempeg_ui
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
endif

ifeq ($(BUILD), car2)
TARGET_LIBS+=-lempeg_ui
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
endif

ifeq ($(BUILD), obsidian)
TARGET_LIBS+=-lempeg_ui
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
endif

ifeq ($(BUILD), jupiter)
TARGET_LIBS+=-lempeg_ui -lfreetype 
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a $(TARGET_GENERIC_LIBDIR)libfreetype.a
endif

ifeq ($(BUILD), mercury)
TARGET_LIBS+=-lempeg_ui
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
endif

ifeq ($(BUILD), jellystone)
TARGET_LIBS+=-lempeg_ui
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
endif

ifeq ($(BUILD), venus)
TARGET_LIBS+=-lempeg_ui
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
endif

ifeq ($(BUILD), granite)
TARGET_LIBS+=-lempeg_ui
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
endif

ifeq ($(BUILD), onyx)
TARGET_LIBS+=-lempeg_ui
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
endif

ifeq ($(BUILD), camelot)
TARGET_LIBS+=-lempeg_ui -lfreetype 
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a $(TARGET_GENERIC_LIBDIR)libfreetype.a
endif

endif # ARCH=arm

ifeq ($(BUILD), car2)
TARGET_LIBS+=-lempeg_net
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_net.a
endif

ifeq ($(BUILD), obsidian)
TARGET_LIBS+=-lempeg_net
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_net.a
endif

ifeq ($(BUILD), jupiter)
TARGET_LIBS+=-lempeg_net -lempeg_cdrom
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_net.a
TARGET_LIBFILES+=$(TARGET_GENERIC_LIBDIR)libempeg_cdrom.a
endif

ifeq ($(BUILD), camelot)
TARGET_LIBS+=-lempeg_net -lempeg_cdrom
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_net.a
TARGET_LIBFILES+=$(TARGET_GENERIC_LIBDIR)libempeg_cdrom.a
endif

ifeq ($(BUILD), tardis)
TARGET_LIBS+=-lempeg_cdrom
TARGET_LIBFILES+=$(TARGET_GENERIC_LIBDIR)libempeg_cdrom.a
endif

ifeq ($(BUILD), whitechapel)
TARGET_LIBS+=-lempeg_ui -lempeg_cdrom
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
TARGET_LIBFILES+=$(TARGET_GENERIC_LIBDIR)libempeg_cdrom.a
endif

ifeq ($(BUILD), kyanite)
TARGET_LIBS+=-lempeg_ui -lempeg_cdrom
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_ui.a
TARGET_LIBFILES+=$(TARGET_GENERIC_LIBDIR)libempeg_cdrom.a
endif

ifeq ($(BUILD), mercury)
TARGET_LIBS+=-lempeg_mercury -lempeg_net
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_mercury.a \
	$(TARGET_SPECIFIC_LIBDIR)libempeg_net.a
endif

ifeq ($(BUILD), jellystone)
TARGET_LIBS+=-lempeg_mercury -lempeg_net
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_mercury.a \
	$(TARGET_SPECIFIC_LIBDIR)libempeg_net.a
endif

ifeq ($(ARCH), arm)
#TARGET_LIBS+=$(TARGET_SPECIFIC_LIBDIR)libempeg_codec.a
TARGET_LIBS+=-lempeg_codec
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_codec.a
TARGET_LIBS+=-lempeg_dsp
TARGET_LIBFILES+=$(TARGET_SPECIFIC_LIBDIR)libempeg_dsp.a
endif

#TARGET_BASE_LIBS+= -lempeg_async \
#	      -lempeg_util -lempeg_protocol -lempeg_thread -lempeg_core \
#	      -lpthread -ldl
#TARGET_LIBFILES+=$(TARGET_GENERIC_LIBDIR)libempeg_core.a \
#		 $(TARGET_GENERIC_LIBDIR)libempeg_async.a \
#		 $(TARGET_GENERIC_LIBDIR)libempeg_protocol.a \
#		 $(TARGET_GENERIC_LIBDIR)libempeg_thread.a \
#		 $(TARGET_SPECIFIC_LIBDIR)libempeg_util.a
TARGET_LIBS_LGPL:=

ifeq ($(DEBUG), 4)
ifneq ($(ARCH:armecos2=armecos), armecos)
TARGET_LIBS+= -lefence
endif
endif
ifeq ($(DEBUG), 5)
TARGET_LIBS+= -lefence
endif
ifeq ($(DEBUG), 3)
TARGET_LIBS+= -lmcheck
endif

ifeq ($(PROFILE),)
HOST_CFLAGS+= -DPROFILE=0
HOST_CXXFLAGS+= -DPROFILE=0
HOST_ASFLAGS+= -DPROFILE=0
TARGET_CFLAGS+= -DPROFILE=0 
TARGET_CXXFLAGS+= -DPROFILE=0
endif

ifeq ($(PROFILE), 1)
HOST_CFLAGS+= -pg -DPROFILE=1
HOST_CXXFLAGS+= -pg -DPROFILE=1
HOST_ASFLAGS+= -DPROFILE=1
HOST_LDFLAGS+= -pg
#HOST_LIBS+=-lc_p
TARGET_CFLAGS+= -pg -DPROFILE=1
TARGET_CXXFLAGS+= -pg -DPROFILE=1
TARGET_ASFLAGS+= -DPROFILE=1
TARGET_LDFLAGS+= -pg
#TARGET_LIBS+=-lc_p
endif

ifeq ($(PROFILE), 2)
HOST_CFLAGS+= -DPROFILE=2
HOST_CXXFLAGS+= -DPROFILE=2
HOST_ASFLAGS+= -DPROFILE=2
HOST_LDFLAGS+=
HOST_LIBS+= -lempeg_profile
HOST_LIBFILES+= $(HOST_GENERIC_LIBDIR)libempeg_profile.a
TARGET_CFLAGS+= -DPROFILE=2
TARGET_CXXFLAGS+= -DPROFILE=2
TARGET_ASFLAGS+= -DPROFILE=2
TARGET_LDFLAGS+=
TARGET_LIBS+= -lempeg_profile
TARGET_LIBFILES+= $(TARGET_GENERIC_LIBDIR)libempeg_profile.a
endif

ifeq ($(VERBOSE), 1)
CC_PRE=
AS_PRE=
DEP_PRE=
AR_PRE=
TARGET_LD_PRE=
HOST_LD_PRE=
else
CC_PRE=@echo Compiling $< ;
AS_PRE=@echo Assembling $< ;
DEP_PRE=@echo Dependency checking $< ;
AR_PRE=@echo Building library $@ ;
TARGET_LD_PRE=@echo Linking $@ ;
TARGET_LD_PRE_PARTIAL=@echo Partially linking $@ ;
HOST_LD_PRE=@echo Linking $@ ;
endif

# pdh 22-Jan-00: take two compilers into the shower? no, just set
# SUNPRO_DEPENDENCIES and go.
# Somebody at gccHQ was smoking crack when they invented
# DEPENDENCIES_OUTPUT because it implies -MM, not -M.
# A grep through gcc/cccp.c reveals that there's an undocumented
# variable SUNPRO_DEPENDENCIES which implies -M. Huzzah!
#
# pdh 06-Feb-03: SUNPRO_DEPENDENCIES *appends*!!!
#
# pdh 28-Feb-03: removing $*.d2 breaks -j builds, empty it instead
#
$(TARGET_PREFIX)%.o : %.c ; $(CC_PRE) $(TARGET_MKDIR) && \
	: > $(TARGET_PREFIX)$*.d2 && \
	SUNPRO_DEPENDENCIES="$(TARGET_PREFIX)$*.d2 $@" $(TARGET_CC) $(TARGET_CFLAGS) -o $@ $<
	@cp -f $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.d
ifeq ($(IS_CYGWIN),0)
	@tr -s ' \\' '\n' < $(TARGET_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(TARGET_PREFIX)$*.d
endif
	@$(RM) $(TARGET_PREFIX)$*.d2

$(TARGET_PREFIX)%.o : %.cpp ; $(CC_PRE) $(TARGET_MKDIR) && \
	: > $(TARGET_PREFIX)$*.d2 && \
	SUNPRO_DEPENDENCIES="$(TARGET_PREFIX)$*.d2 $@" $(TARGET_CXX) $(TARGET_CXXFLAGS) -o $@ $< || ( touch $(TARGET_PREFIX)$*.failed ; exit 1 )
	@cp -f $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.d
ifeq ($(IS_CYGWIN),0)
	@tr -s ' \\' '\n' < $(TARGET_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(TARGET_PREFIX)$*.d
endif
	@$(RM) $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.failed

## Sometimes *.cpp is autogenerated in the target directory
$(TARGET_PREFIX)%.o : $(TARGET_PREFIX)%.cpp ; $(CC_PRE) $(TARGET_MKDIR) && \
	: > $(TARGET_PREFIX)$*.d2 && \
	SUNPRO_DEPENDENCIES="$(TARGET_PREFIX)$*.d2 $@" $(TARGET_CXX) $(TARGET_CXXFLAGS) -o $@ $< || ( touch $(TARGET_PREFIX)$*.failed ; exit 1 )
	@cp -f $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.d
ifeq ($(IS_CYGWIN),0)
	@tr -s ' \\' '\n' < $(TARGET_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(TARGET_PREFIX)$*.d
endif
	@$(RM) $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.failed

$(TARGET_PREFIX)%.o : %.S ; $(AS_PRE) $(TARGET_MKDIR) && \
	( ! ( fgrep -v hat $< | fgrep -n \}^ >&2 ) || ( echo -e "\n*** Forbidden hat detected in assembler file $<\n\n" >&2 ; exit 1 ) ) && \
	: > $(TARGET_PREFIX)$*.d2 && \
	SUNPRO_DEPENDENCIES="$(TARGET_PREFIX)$*.d2 $@" $(TARGET_CC) $(TARGET_ASFLAGS) -c -o $@ $<
	@cp -f $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.d
ifeq ($(IS_CYGWIN),0)
	@tr -s ' \\' '\n' < $(TARGET_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(TARGET_PREFIX)$*.d
endif
	@$(RM) $(TARGET_PREFIX)$*.d2

# Position independent code

$(TARGET_PREFIX)%.pio : %.c ; $(CC_PRE) $(TARGET_MKDIR) && \
	: > $(TARGET_PREFIX)$*.d2 && \
	SUNPRO_DEPENDENCIES="$(TARGET_PREFIX)$*.d2 $@" $(TARGET_CC) $(TARGET_CFLAGS) -fPIC -o $@ $<
	@cp -f $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.d
ifeq ($(IS_CYGWIN),0)
	@tr -s ' \\' '\n' < $(TARGET_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(TARGET_PREFIX)$*.d
endif
	@$(RM) $(TARGET_PREFIX)$*.d2

$(TARGET_PREFIX)%.pio : %.cpp ; $(CC_PRE) $(TARGET_MKDIR) && \
	: > $(TARGET_PREFIX)$*.d2 && \
	SUNPRO_DEPENDENCIES="$(TARGET_PREFIX)$*.d2 $@" $(TARGET_CXX) $(TARGET_CXXFLAGS) -fPIC -o $@ $<
	@cp -f $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.d
ifeq ($(IS_CYGWIN),0)
	@tr -s ' \\' '\n' < $(TARGET_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(TARGET_PREFIX)$*.d
endif
	@$(RM) $(TARGET_PREFIX)$*.d2

$(TARGET_PREFIX)%.pio : %.S ; $(AS_PRE) $(TARGET_MKDIR) && \
	( ! ( fgrep -v hat $< | fgrep -n \}^ >&2 ) || ( echo -e "\n*** Forbidden hat detected in assembler file $<\n\n" >&2 ; exit 1 ) ) && \
	: > $(TARGET_PREFIX)$*.d2 && \
	SUNPRO_DEPENDENCIES="$(TARGET_PREFIX)$*.d2 $@" $(TARGET_CC) $(TARGET_ASFLAGS) -fPIC -c -o $@ $<
	@cp -f $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.d
ifeq ($(IS_CYGWIN),0)
	@tr -s ' \\' '\n' < $(TARGET_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(TARGET_PREFIX)$*.d
endif
	@$(RM) $(TARGET_PREFIX)$*.d2

%.s : %.cpp
	$(TARGET_MKDIR) && \
		: > $(TARGET_PREFIX)$*.d2 && \
		SUNPRO_DEPENDENCIES="$(TARGET_PREFIX)$*.d2 $@" \
		$(TARGET_CXX) $(TARGET_CXXFLAGS) -fverbose-asm -S -o $@ $<
	@cp -f $(TARGET_PREFIX)$*.d2 $(TARGET_PREFIX)$*.d
ifeq ($(IS_CYGWIN),0)
	@tr -s ' \\' '\n' < $(TARGET_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(TARGET_PREFIX)$*.d
endif
	@$(RM) $(TARGET_PREFIX)$*.d2

%.i : %.cpp ; $(TARGET_CXX) -E -dD -C $(TARGET_CXXFLAGS) -o $@ $<

$(TARGET_SPECIFIC_LIBDIR)%.a :
	@if [ "`echo $^`" = "" ]; then \
		echo "Cowardly not building empty library $@." ;\
		echo ;\
		echo "This usually means one of:" ;\
		echo "  * Your makefile target depends on the library file but nothing has built it" ;\
		echo "    (e.g. predeps is wrong)" ;\
		echo "  * Your makefile names the SPECIFIC version but the library is GENERIC" ;\
		echo "  * Your empeg/Make.rules.lib is not up-to-date" ; echo;\
		exit 1; \
	fi 1>&2
	$(AR_PRE) $(TARGET_SPECIFIC_MKDIR) && $(RM) $@ && $(TARGET_AR) rc $@ $^ && $(TARGET_RANLIB) $@

$(TARGET_GENERIC_LIBDIR)%.a :
	@if [ "`echo $^`" = "" ]; then \
		echo "Cowardly not building empty library $@." ;\
		echo ;\
		echo "This usually means one of:" ;\
		echo "  * Your makefile target depends on the library file but nothing has built it" ;\
		echo "    (e.g. predeps is wrong)" ;\
		echo "  * Your makefile names the GENERIC version but the library is SPECIFIC" ;\
		echo "  * Your empeg/Make.rules.lib is not up-to-date" ; echo;\
		exit 1; \
	fi 1>&2
	$(AR_PRE) $(TARGET_GENERIC_MKDIR) && $(RM) $@ && $(TARGET_AR) rc $@ $^ && $(TARGET_RANLIB) $@

# We can only have the host rules if they are distinct from the target rules.
ifneq ($(TARGET_PREFIX), $(HOST_PREFIX))
$(HOST_PREFIX)%.o : %.c ; $(CC_PRE) $(HOST_MKDIR) && \
	SUNPRO_DEPENDENCIES="$(HOST_PREFIX)$*.d2 $@" $(HOST_CC) $(HOST_CFLAGS) -o $@ $<
	@cp -f $(HOST_PREFIX)$*.d2 $(HOST_PREFIX)$*.d
	@tr -s ' \\' '\n' < $(HOST_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(HOST_PREFIX)$*.d
	@$(RM) $(HOST_PREFIX)$*.d2
$(HOST_PREFIX)%.o : %.cpp ; $(CC_PRE) $(HOST_MKDIR) && \
	SUNPRO_DEPENDENCIES="$(HOST_PREFIX)$*.d2 $@" $(HOST_CXX) $(HOST_CXXFLAGS) -o $@ $<
	@cp -f $(HOST_PREFIX)$*.d2 $(HOST_PREFIX)$*.d
	@tr -s ' \\' '\n' < $(HOST_PREFIX)$*.d2 | grep -v ':' | sed -e 's/$$/:/' >> $(HOST_PREFIX)$*.d
	@$(RM) $(HOST_PREFIX)$*.d2
# These will interfere with TARGET versions.
#%.s : %.cpp ; $(HOST_CXX) $(HOST_CXXFLAGS) -fverbose-asm -S -o $@ $<
#%.i : %.cpp ; $(HOST_CXX) -E $(HOST_CXXFLAGS) -o $@ $<
endif

%.xpmsane : %.xpm ; $(XPM_SANITISE) < $^ > $@

%/Make.hosts : %/Make.hosts.dist
	@(if [ -f $(TOP)/Make.hosts ] ; then \
		echo "Warning: " `pwd`$(TOP)/Make.hosts.dist has changed, you may need to update ; \
		echo "         " `pwd`$(TOP)/Make.hosts. ; \
	else \
		echo "Warning: " Created `pwd`$(TOP)/Make.hosts from distributed file. You may ; \
		echo "         " need to edit it. ; \
		sed s/Specify_the_ip_or_hostname_of_your_car_player_here/empeg-`whoami`/ < $(TOP)/Make.hosts.dist | sed 's/Do not edit.*/Please edit this file it was generated from Make.hosts.dist/' | grep -v '^#!' > $(TOP)/Make.hosts ; \
	fi)

-include $(TOP)/Make.hosts

ifeq ($(BUILD_BASIC), car)
DOWNLOAD_HOST=$(DOWNLOAD_HOST_CAR)
endif
ifeq ($(BUILD_BASIC), jupiter)
DOWNLOAD_HOST=$(DOWNLOAD_HOST_JUPITER)
endif
ifeq ($(BUILD_BASIC), venus)
DOWNLOAD_HOST=$(DOWNLOAD_HOST_JUPITER)
endif
ifeq ($(BUILD_BASIC), granite)
DOWNLOAD_HOST=$(DOWNLOAD_HOST_JUPITER)
endif
ifeq ($(BUILD_BASIC), onyx)
DOWNLOAD_HOST=$(DOWNLOAD_HOST_ONYX)
endif
ifeq ($(BUILD_BASIC), tardis)
DOWNLOAD_HOST=$(DOWNLOAD_HOST_TARDIS)
endif
ifeq ($(BUILD_BASIC), whitechapel)
DOWNLOAD_HOST=$(DOWNLOAD_HOST_WHITECHAPEL)
endif
ifeq ($(BUILD_BASIC), kyanite)
DOWNLOAD_HOST=$(DOWNLOAD_HOST_KYANITE)
endif
ifeq ($(BUILD_BASIC), camelot)
DOWNLOAD_HOST=$(DOWNLOAD_HOST_CAMELOT)
endif

CWD=$(shell pwd)
FAKE_ROOT=$(CWD)/$(TOP)/downloadable-root/$(TARGET_PREFIX)
DISK_ROOT=$(FAKE_ROOT)
RAMDISK_ROOT=$(CWD)/$(TOP)/downloadable-root/ramdisk-$(TARGET_PREFIX)

ifeq ($(NFSROOT_SERVER), localhost)
NFSROOT_CP:=cp
NFSROOT_DESTPREFIX:=
NFSROOT_RSH:=
else
NFSROOT_CP:=rcp
NFSROOT_DESTPREFIX:=$(NFSROOT_SERVER):
NFSROOT_RSH:=rsh $(NFSROOT_SERVER)
endif

ifeq ($(BUILD_BASIC), car)
KERNEL_DIR=$(TOP)/kernel
endif

ifeq ($(BUILD_BASIC), mercury)
KERNEL_DIR=$(TOP)/kernel-net
endif

ifeq ($(BUILD_BASIC), jellystone)
KERNEL_DIR=$(TOP)/kernel-net
endif

ifeq ($(BUILD_BASIC), jupiter)
KERNEL_DIR=$(TOP)/kernel-2.4
endif

ifeq ($(BUILD_BASIC), venus)
KERNEL_DIR=$(TOP)/kernel-2.4
endif

ifeq ($(BUILD_BASIC), granite)
KERNEL_DIR=$(TOP)/kernel-2.4
endif

ifeq ($(BUILD_BASIC), kennedy)
KERNEL_DIR=$(TOP)/kernel
endif

ifeq ($(BUILD_BASIC), tardis)
KERNEL_DIR=$(TOP)/kernel-2.4
endif

ifeq ($(BUILD_BASIC), whitechapel)
KERNEL_DIR=$(TOP)/kernel-2.4
endif

ifeq ($(BUILD_BASIC), kyanite)
KERNEL_DIR=$(TOP)/kernel-2.4
endif

# For people that are dependent on onyx_makeupgrade

.PHONY: .tools.onyx_makeupgrade
.tools.onyx_makeupgrade :
	$(MAKE) -q -C $(TOP)/tools onyx_makeupgrade || $(MAKE) -C $(TOP)/tools onyx_makeupgrade

ONYX_MAKEUPGRADE:=$(TOP)/tools/onyx_makeupgrade

#.PHONY: .tools.makeupgrade
#.tools.makeupgrade :
#	$(MAKE) -q -C $(TOP)/tools makeupgrade || $(MAKE) -C $(TOP)/tools makeupgrade
#
MAKEUPGRADE:=$(TOP)/tools/makeupgrade-doesnt-exist-any-more

.PHONY: .tools.sapphire_makeupgrade
.tools.sapphire_makeupgrade :
	$(MAKE) -q -C $(TOP)/tools ARCH=pc sapphire_makeupgrade || $(MAKE) -C $(TOP)/tools ARCH=pc sapphire_makeupgrade

SAPPHIRE_MAKEUPGRADE=$(TOP)/tools/sapphire_makeupgrade

# For people that are dependent on tea_encode

.PHONY: .tools.tea
.tools.tea :
	$(MAKE) ARCH=pc -C $(TOP)/tools make-tea

TEA_ENCODE:=$(TOP)/tools/tea encode
TEA_DECODE:=$(TOP)/tools/tea decode

# For people that are dependent on encode_rle4

.PHONY: .tools.encode_rle4
.tools.encode_rle4 :
	$(MAKE) -q ARCH=pc -C $(TOP)/tools encode_rle4 || $(MAKE) ARCH=pc -C $(TOP)/tools encode_rle4

ENCODE_RLE4:=$(TOP)/tools/encode_rle4

# For people that are dependent on onyx_buildflashimage

.PHONY: .tools.onyx_buildflashimage
.tools.onyx_buildflashimage :
	$(MAKE) -q ARCH=pc -C $(TOP)/tools onyx_buildflashimage || $(MAKE) ARCH=pc -C $(TOP)/tools onyx_buildflashimage

ONYX_BUILDFLASHIMAGE:=$(TOP)/tools/onyx_buildflashimage

# For people that are dependent on sapphire_buildflashimage

.PHONY: .tools.sapphire_buildflashimage
.tools.sapphire_buildflashimage :
	$(MAKE) -q ARCH=pc -C $(TOP)/tools sapphire_buildflashimage || $(MAKE) ARCH=pc -C $(TOP)/tools sapphire_buildflashimage

SAPPHIRE_BUILDFLASHIMAGE:=$(TOP)/tools/sapphire_buildflashimage
